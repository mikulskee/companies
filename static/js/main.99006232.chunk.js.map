{"version":3,"sources":["contexts/CompaniesContext.js","components/Pagination.js","components/Posts.js","components/SearchInput.js","components/Loader.js","components/Warning.js","components/CompaniesTable.js","App.js","index.js"],"names":["CompaniesContext","createContext","CompaniesContextProvider","props","useState","companiesRawData","setCompaniesRawData","incomesRawData","setIncomesRawData","incomes","setIncomes","mergedData","setMergedData","searchedData","setSearchedData","inputValue","setInputValue","getCompanies","a","fetch","response","json","data","console","log","getStats","item","id","useEffect","then","table","map","Promise","all","files","length","totalIncome","parseFloat","value","reduce","b","toFixed","average","lastMonth","date","Date","parse","sort","getMonth","getFullYear","shift","filter","hash","Map","concat","forEach","obj","set","Object","assign","get","Array","from","values","Provider","sortMergedData","sortBy","sortedTable","newTable","name","localeCompare","city","displayDataViaSerchedPhrase","keys","some","i","toString","toLowerCase","indexOf","children","Wrapper","styled","nav","Pagination","companiesPerPage","totalPosts","paginate","currentPage","setCurrentPage","currentSite","setCurrentSite","buttonsPerPage","indexOfLastButton","indexOfFirstButton","pageNumbers","Math","ceil","push","currentButtonList","slice","handlePagination","number","e","preventDefault","switchPage","document","querySelectorAll","classList","remove","parseInt","innerHTML","add","className","onClick","icon","faCaretLeft","key","faCaretRight","div","List","ul","ListItem","li","Posts","posts","useContext","listOfCompanies","company","handleClick","target","querySelector","contains","toggle","faSortUp","faSortDown","InputWrapper","SearchInput","faSearch","type","placeholder","onChange","handleInputChange","Loader","Warning","h3","CompaniesTable","currentList","setCurrentList","indexOfLastPost","indexOfFirstPost","pageNumber","Title","h1","App","faChartBar","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.99006232.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\n\r\nexport const CompaniesContext = createContext();\r\n\r\nconst CompaniesContextProvider = (props) => {\r\n  const [companiesRawData, setCompaniesRawData] = useState([]);\r\n  const [incomesRawData, setIncomesRawData] = useState([]);\r\n  const [incomes, setIncomes] = useState([]);\r\n  const [mergedData, setMergedData] = useState([]);\r\n  const [searchedData, setSearchedData] = useState([]);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const URL = \"https://recruitment.hal.skygate.io/companies\";\r\n  const statsURL = \"https://recruitment.hal.skygate.io/incomes/\";\r\n\r\n  const getCompanies = async () => {\r\n    try {\r\n      const response = await fetch(URL);\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const getStats = async (item) => {\r\n    try {\r\n      const response = await fetch(`${statsURL}${item.id}`);\r\n      const data = response.json();\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // multiple fetch for incomes data\r\n    // get and set raw company data\r\n    // get and set raw incomes data\r\n\r\n    getCompanies().then((data) => {\r\n      setCompaniesRawData(data);\r\n      const table = data.map((data) => getStats(data));\r\n      Promise.all(table).then((files) => setIncomesRawData(files));\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // improve/make more readable array of incomes\r\n    if (incomesRawData.length) {\r\n      const table = incomesRawData\r\n        .map((item) => ({\r\n          id: item.id,\r\n          totalIncome: item.incomes\r\n            .map((item) => parseFloat(item.value))\r\n            .reduce((a, b) => a + b, 0)\r\n            .toFixed(2),\r\n          average: (\r\n            item.incomes\r\n              .map((item) => parseFloat(item.value))\r\n              .reduce((a, b) => a + b, 0) / item.incomes.length\r\n          ).toFixed(2),\r\n          lastMonth: item.incomes\r\n            .map((item) => ({\r\n              value: item.value,\r\n              date: Date.parse(item.date),\r\n            }))\r\n            .sort((a, b) => b.date - a.date)\r\n            .map((item) => ({\r\n              value: item.value,\r\n              date: `${new Date(item.date).getMonth()} ${new Date(\r\n                item.date\r\n              ).getFullYear()}`,\r\n            })),\r\n        }))\r\n        .map((item) => {\r\n          let shift = \"\";\r\n          shift = item.lastMonth[0].date;\r\n          const table = item.lastMonth.filter((item) => {\r\n            return item.date === shift;\r\n          });\r\n          return {\r\n            ...item,\r\n            lastMonth: table\r\n              .map((item) => item.value)\r\n              .reduce((a, b) => parseFloat(a) + parseFloat(b), 0)\r\n              .toFixed(2),\r\n          };\r\n        });\r\n\r\n      setIncomes(table);\r\n    }\r\n  }, [incomesRawData]);\r\n\r\n  useEffect(() => {\r\n    // merge two arrays of data (company and icomes)\r\n    if (incomes.length > 0) {\r\n      let hash = new Map();\r\n      companiesRawData.concat(incomes).forEach((obj) => {\r\n        hash.set(obj.id, Object.assign(hash.get(obj.id) || {}, obj));\r\n      });\r\n      const table = Array.from(hash.values());\r\n\r\n      setMergedData(table);\r\n    }\r\n  }, [incomes, companiesRawData]);\r\n\r\n  const sortMergedData = (sortBy) => {\r\n    let newTable = [];\r\n    let sortedTable;\r\n\r\n    if (searchedData.length) {\r\n      newTable = [...searchedData];\r\n      sortedTable = (newTable) => {\r\n        setSearchedData(newTable);\r\n      };\r\n    } else {\r\n      newTable = [...mergedData];\r\n      sortedTable = (newTable) => {\r\n        setMergedData(newTable);\r\n      };\r\n    }\r\n\r\n    switch (sortBy) {\r\n      case \"ID_ASC\":\r\n        newTable.sort((a, b) => a.id - b.id);\r\n        sortedTable(newTable);\r\n        break;\r\n      case \"ID_DESC\":\r\n        newTable.sort((a, b) => b.id - a.id);\r\n        sortedTable(newTable);\r\n\r\n        break;\r\n      case \"NAME_ASC\":\r\n        newTable.sort((a, b) => a.name.localeCompare(b.name));\r\n        sortedTable(newTable);\r\n\r\n        break;\r\n      case \"NAME_DESC\":\r\n        newTable.sort((a, b) => b.name.localeCompare(a.name));\r\n        sortedTable(newTable);\r\n\r\n        break;\r\n      case \"CITY_ASC\":\r\n        newTable.sort((a, b) => a.city.localeCompare(b.city));\r\n        sortedTable(newTable);\r\n\r\n        break;\r\n      case \"CITY_DESC\":\r\n        newTable.sort((a, b) => b.city.localeCompare(a.city));\r\n        sortedTable(newTable);\r\n\r\n        break;\r\n\r\n      case \"TOTAL_ASC\":\r\n        newTable.sort(\r\n          (a, b) => parseFloat(a.totalIncome) - parseFloat(b.totalIncome)\r\n        );\r\n        sortedTable(newTable);\r\n\r\n        break;\r\n      case \"TOTAL_DESC\":\r\n        newTable.sort(\r\n          (a, b) => parseFloat(b.totalIncome) - parseFloat(a.totalIncome)\r\n        );\r\n        sortedTable(newTable);\r\n\r\n        break;\r\n\r\n      case \"AVERAGE_ASC\":\r\n        newTable.sort((a, b) => parseFloat(a.average) - parseFloat(b.average));\r\n        sortedTable(newTable);\r\n\r\n        break;\r\n      case \"AVERAGE_DESC\":\r\n        newTable.sort((a, b) => parseFloat(b.average) - parseFloat(a.average));\r\n        sortedTable(newTable);\r\n\r\n        break;\r\n      case \"LAST_ASC\":\r\n        newTable.sort(\r\n          (a, b) => parseFloat(a.lastMonth) - parseFloat(b.lastMonth)\r\n        );\r\n        sortedTable(newTable);\r\n\r\n        break;\r\n      case \"LAST_DESC\":\r\n        newTable.sort(\r\n          (a, b) => parseFloat(b.lastMonth) - parseFloat(a.lastMonth)\r\n        );\r\n        sortedTable(newTable);\r\n\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const displayDataViaSerchedPhrase = (inputValue) => {\r\n    setInputValue(inputValue);\r\n\r\n    if (inputValue.length) {\r\n      const newTable = mergedData.filter((item) => {\r\n        return Object.keys(item).some((i) => {\r\n          return (\r\n            item[i]\r\n              .toString()\r\n              .toLowerCase()\r\n              .indexOf(inputValue.toLowerCase()) !== -1\r\n          );\r\n        });\r\n      });\r\n\r\n      setSearchedData(newTable);\r\n    } else {\r\n      setSearchedData([]);\r\n    }\r\n  };\r\n  return (\r\n    <CompaniesContext.Provider\r\n      value={{\r\n        mergedData,\r\n        sortMergedData,\r\n        displayDataViaSerchedPhrase,\r\n        searchedData,\r\n        inputValue,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </CompaniesContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CompaniesContextProvider;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCaretLeft, faCaretRight } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Wrapper = styled.nav`\r\n  margin: 20px 0;\r\n  ul {\r\n    list-style: none;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    width: 80%;\r\n    margin: 0 auto;\r\n    li {\r\n      margin: 0px 2px;\r\n      @media only screen and (min-width: 1024px) {\r\n        margin: 0 5px;\r\n      }\r\n      button {\r\n        cursor: pointer;\r\n        width: 35px;\r\n        height: 35px;\r\n        border-radius: 50%;\r\n        color: black;\r\n        border: none;\r\n        background: none;\r\n        transition: all 0.15s linear;\r\n\r\n        @media only screen and (min-width: 1024px) {\r\n          width: 45px;\r\n          height: 45px;\r\n          font-size: 18px;\r\n        }\r\n        &:hover {\r\n          background-color: #a2a2a2;\r\n        }\r\n        &.active {\r\n          background-color: #d2d2d2;\r\n          color: white;\r\n          &:hover {\r\n            background-color: #929292;\r\n          }\r\n        }\r\n\r\n        &.switch {\r\n          font-weight: bold;\r\n          background-color: #a2a2a2;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Pagination = ({\r\n  companiesPerPage,\r\n  totalPosts,\r\n  paginate,\r\n  currentPage,\r\n  setCurrentPage,\r\n}) => {\r\n  const [currentSite, setCurrentSite] = useState(0);\r\n  const [buttonsPerPage] = useState(3);\r\n  const indexOfLastButton = currentSite + buttonsPerPage;\r\n  const indexOfFirstButton = indexOfLastButton - buttonsPerPage;\r\n\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / companiesPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  const currentButtonList = pageNumbers.slice(\r\n    indexOfFirstButton,\r\n    indexOfLastButton\r\n  );\r\n\r\n  const handlePagination = (number, e) => {\r\n    e.preventDefault();\r\n    if (number === 1) {\r\n      paginate(number);\r\n      setCurrentSite(number - 1);\r\n    } else if (number >= pageNumbers.length - (buttonsPerPage - 2)) {\r\n      paginate(number);\r\n      setCurrentSite(pageNumbers.length - buttonsPerPage);\r\n    } else {\r\n      paginate(number);\r\n      setCurrentSite(number - 2);\r\n    }\r\n  };\r\n\r\n  const switchPage = (id, e) => {\r\n    e.preventDefault();\r\n    if (id === \"up\") {\r\n      handlePagination(currentPage + 1, e);\r\n      setCurrentPage(currentPage + 1);\r\n    } else {\r\n      setCurrentPage(currentPage + 1);\r\n      handlePagination(currentPage - 1, e);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (pageNumbers.length) {\r\n      const buttons = document.querySelectorAll(\".pagination-button\");\r\n      buttons.forEach((item, i) => {\r\n        item.classList.remove(\"active\");\r\n        if (currentPage === parseInt(item.innerHTML)) {\r\n          item.classList.add(\"active\");\r\n        }\r\n      });\r\n    }\r\n  }, [currentPage, pageNumbers]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      {pageNumbers.length > 1 ? (\r\n        <ul>\r\n          {currentPage > 1 ? (\r\n            <li>\r\n              <button className=\"switch\" onClick={(e) => switchPage(\"down\", e)}>\r\n                <FontAwesomeIcon icon={faCaretLeft} />\r\n              </button>\r\n            </li>\r\n          ) : null}\r\n          {currentPage > 2 ? (\r\n            <li>\r\n              <button onClick={(e) => handlePagination(1, e)}>{1}</button> ...{\" \"}\r\n            </li>\r\n          ) : null}\r\n\r\n          {currentButtonList.map((number) => (\r\n            <li key={number}>\r\n              <button\r\n                className=\"pagination-button\"\r\n                onClick={(e) => handlePagination(number, e)}\r\n              >\r\n                {number}\r\n              </button>\r\n            </li>\r\n          ))}\r\n\r\n          {currentPage <= pageNumbers.length - (buttonsPerPage - 1) ? (\r\n            <li>\r\n              {\" \"}\r\n              ...{\" \"}\r\n              <button onClick={(e) => handlePagination(pageNumbers.length, e)}>\r\n                {pageNumbers.length}\r\n              </button>\r\n            </li>\r\n          ) : null}\r\n          {currentPage !== pageNumbers.length ? (\r\n            <li>\r\n              <button className=\"switch\" onClick={(e) => switchPage(\"up\", e)}>\r\n                <FontAwesomeIcon icon={faCaretRight} />\r\n              </button>\r\n            </li>\r\n          ) : null}\r\n        </ul>\r\n      ) : null}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { CompaniesContext } from \"../contexts/CompaniesContext\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSortUp, faSortDown } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Wrapper = styled.div`\r\n  overflow: auto;\r\n  padding: 10px 0;\r\n`;\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n  margin: 0 auto;\r\n  flex-direction: column;\r\n  box-shadow: 0px 2px 10px 0px rgba(0, 0, 0, 0.2),\r\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\r\n  min-width: 360px;\r\n  max-width: 1240px;\r\n  @media only screen and (min-width: 1024px) {\r\n    width: 98%;\r\n  }\r\n  @media only screen and (min-width: 1366px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nconst ListItem = styled.li`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  background-color: #fff;\r\n  border-top: 1px solid #666;\r\n\r\n  &:nth-last-child(1) {\r\n    border-bottom: 1px solid #666;\r\n  }\r\n\r\n  &:nth-child(odd) {\r\n    background-color: #f3f3f3;\r\n  }\r\n\r\n  div.id {\r\n    width: 13%;\r\n    @media only screen and (min-width: 1024px) {\r\n      width: 6%;\r\n    }\r\n  }\r\n  div.name {\r\n    width: 15%;\r\n    @media only screen and (min-width: 1024px) {\r\n      width: 22%;\r\n    }\r\n  }\r\n\r\n  div {\r\n    width: 18%;\r\n    padding: 10px 5px;\r\n    text-align: center;\r\n    word-break: break-word;\r\n    border-left: 1px solid #666;\r\n    &:nth-last-child(1) {\r\n      border-right: 1px solid #666;\r\n    }\r\n\r\n    &.header {\r\n      display: flex;\r\n      font-weight: bold;\r\n      word-break: keep-all;\r\n      justify-content: center;\r\n      align-items: center;\r\n      cursor: pointer;\r\n      p {\r\n        font-size: 12px;\r\n        pointer-events: none;\r\n        @media only screen and (min-width: 1024px) {\r\n          font-size: 16px;\r\n        }\r\n        @media only screen and (min-width: 1366px) {\r\n          font-size: 20px;\r\n        }\r\n      }\r\n\r\n      span {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-direction: column;\r\n        pointer-events: none;\r\n        opacity: 0;\r\n        &.active-up {\r\n          opacity: 1;\r\n          svg:nth-child(1) {\r\n            color: #000;\r\n          }\r\n          svg:nth-child(2) {\r\n            color: #bbb;\r\n          }\r\n        }\r\n        &.active-down {\r\n          opacity: 1;\r\n          svg:nth-child(2) {\r\n            color: #000;\r\n          }\r\n          svg:nth-child(1) {\r\n            color: #bbb;\r\n          }\r\n        }\r\n        svg {\r\n          margin: -6px 4px;\r\n          color: #bbb;\r\n        }\r\n      }\r\n    }\r\n\r\n    &.stats {\r\n      p {\r\n        font-size: 10px;\r\n        @media only screen and (min-width: 1024px) {\r\n          font-size: 12px;\r\n        }\r\n        @media only screen and (min-width: 1366px) {\r\n          font-size: 14px;\r\n        }\r\n\r\n        &.name {\r\n          font-weight: bold;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst Posts = (props) => {\r\n  const { posts } = props;\r\n  const { sortMergedData } = useContext(CompaniesContext);\r\n\r\n  const listOfCompanies = posts.map((company) => (\r\n    <ListItem key={company.id}>\r\n      <div className=\"stats id\">\r\n        <p className=\"id data-text\">{company.id}</p>\r\n      </div>\r\n      <div className=\"stats name\">\r\n        <p className=\"name data-text\">{company.name}</p>\r\n      </div>\r\n      <div className=\"stats company\">\r\n        <p className=\"company data-text\">{company.city}</p>\r\n      </div>\r\n      <div className=\"stats total\">\r\n        <p className=\"total data-text\">{company.totalIncome}</p>\r\n      </div>\r\n      <div className=\"stats average\">\r\n        <p className=\"average data-text\">{company.average}</p>\r\n      </div>\r\n      <div className=\"stats lastmonth\">\r\n        <p className=\"lastmonth data-text\">{company.lastMonth}</p>\r\n      </div>\r\n    </ListItem>\r\n  ));\r\n\r\n  const handleClick = (e) => {\r\n    if (e.target.querySelector(\"span\").classList.contains(\"active-down\")) {\r\n      document\r\n        .querySelectorAll(\"div.header span\")\r\n        .forEach((item) => item.classList.remove(\"active-down\"));\r\n      e.target.querySelector(\"span\").classList.add(\"active-up\");\r\n    } else {\r\n      document\r\n        .querySelectorAll(\"div.header span\")\r\n        .forEach((item) => item.classList.remove(\"active-up\", \"active-down\"));\r\n      e.target.querySelector(\"span\").classList.add(\"active-down\");\r\n    }\r\n\r\n    e.target.classList.toggle(\"ASC\");\r\n\r\n    if (e.target.classList.contains(\"ASC\")) {\r\n      sortMergedData(`${e.target.id}_ASC`);\r\n    } else {\r\n      sortMergedData(`${e.target.id}_DESC`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <List>\r\n        <ListItem className=\"headers\">\r\n          <div className=\"id header\" id=\"ID\" onClick={(e) => handleClick(e)}>\r\n            <p>ID</p>\r\n            <span className=\"sorting-icons\">\r\n              <FontAwesomeIcon icon={faSortUp} />\r\n              <FontAwesomeIcon icon={faSortDown} />\r\n            </span>\r\n          </div>\r\n\r\n          <div\r\n            className=\"name header\"\r\n            id=\"NAME\"\r\n            onClick={(e) => handleClick(e)}\r\n          >\r\n            <p>Name</p>\r\n            <span className=\"sorting-icons\">\r\n              <FontAwesomeIcon icon={faSortUp} />\r\n              <FontAwesomeIcon icon={faSortDown} />\r\n            </span>\r\n          </div>\r\n\r\n          <div\r\n            className=\"city header\"\r\n            id=\"CITY\"\r\n            onClick={(e) => handleClick(e)}\r\n          >\r\n            <p>City</p>\r\n            <span className=\"sorting-icons\">\r\n              <FontAwesomeIcon icon={faSortUp} />\r\n              <FontAwesomeIcon icon={faSortDown} />\r\n            </span>\r\n          </div>\r\n\r\n          <div\r\n            className=\"total header\"\r\n            id=\"TOTAL\"\r\n            onClick={(e) => handleClick(e)}\r\n          >\r\n            <p>Total Income</p>\r\n            <span className=\"sorting-icons\">\r\n              <FontAwesomeIcon icon={faSortUp} />\r\n              <FontAwesomeIcon icon={faSortDown} />\r\n            </span>\r\n          </div>\r\n\r\n          <div\r\n            className=\"average header\"\r\n            id=\"AVERAGE\"\r\n            onClick={(e) => handleClick(e)}\r\n          >\r\n            <p>Average Income</p>\r\n            <span className=\"sorting-icons\">\r\n              <FontAwesomeIcon icon={faSortUp} />\r\n              <FontAwesomeIcon icon={faSortDown} />\r\n            </span>\r\n          </div>\r\n\r\n          <div\r\n            className=\"last header\"\r\n            id=\"LAST\"\r\n            onClick={(e) => handleClick(e)}\r\n          >\r\n            <p>Last Month Income</p>\r\n            <span className=\"sorting-icons\">\r\n              <FontAwesomeIcon icon={faSortUp} />\r\n              <FontAwesomeIcon icon={faSortDown} />\r\n            </span>\r\n          </div>\r\n        </ListItem>\r\n        {listOfCompanies}\r\n      </List>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { CompaniesContext } from \"../contexts/CompaniesContext\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 10px 0;\r\n`;\r\nconst InputWrapper = styled.div`\r\n  display: inline;\r\n  border: 1px solid black;\r\n  background-color: #fff;\r\n  span {\r\n    color: #757575;\r\n    margin: 0 10px;\r\n  }\r\n  input {\r\n    border: none;\r\n    color: #757575;\r\n    outline: none;\r\n    padding: 5px 0;\r\n    &:focus {\r\n      border: none;\r\n    }\r\n  }\r\n`;\r\n\r\nconst SearchInput = () => {\r\n  const { displayDataViaSerchedPhrase } = useContext(CompaniesContext);\r\n\r\n  const handleInputChange = (e) => {\r\n    displayDataViaSerchedPhrase(e.target.value);\r\n  };\r\n  return (\r\n    <Wrapper>\r\n      <InputWrapper>\r\n        <span>\r\n          <FontAwesomeIcon icon={faSearch} />\r\n        </span>\r\n\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search\"\r\n          onChange={(e) => handleInputChange(e)}\r\n        />\r\n      </InputWrapper>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nconst Wrapper = styled.div`\r\n  margin-top: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  .lds-ellipsis {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 80px;\r\n    height: 80px;\r\n  }\r\n  .lds-ellipsis div {\r\n    position: absolute;\r\n    top: 33px;\r\n    width: 13px;\r\n    height: 13px;\r\n    border-radius: 50%;\r\n    background: #000;\r\n    animation-timing-function: cubic-bezier(0, 1, 1, 0);\r\n  }\r\n  .lds-ellipsis div:nth-child(1) {\r\n    left: 8px;\r\n    animation: lds-ellipsis1 0.6s infinite;\r\n  }\r\n  .lds-ellipsis div:nth-child(2) {\r\n    left: 8px;\r\n    animation: lds-ellipsis2 0.6s infinite;\r\n  }\r\n  .lds-ellipsis div:nth-child(3) {\r\n    left: 32px;\r\n    animation: lds-ellipsis2 0.6s infinite;\r\n  }\r\n  .lds-ellipsis div:nth-child(4) {\r\n    left: 56px;\r\n    animation: lds-ellipsis3 0.6s infinite;\r\n  }\r\n  @keyframes lds-ellipsis1 {\r\n    0% {\r\n      transform: scale(0);\r\n    }\r\n    100% {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n  @keyframes lds-ellipsis3 {\r\n    0% {\r\n      transform: scale(1);\r\n    }\r\n    100% {\r\n      transform: scale(0);\r\n    }\r\n  }\r\n  @keyframes lds-ellipsis2 {\r\n    0% {\r\n      transform: translate(0, 0);\r\n    }\r\n    100% {\r\n      transform: translate(24px, 0);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <Wrapper>\r\n      <h1>Loading data</h1>\r\n      <div className=\"lds-ellipsis\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Warning = styled.h3`\r\n  margin-top: 100px;\r\n  width: 100%;\r\n  text-align: center;\r\n`;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { CompaniesContext } from \"../contexts/CompaniesContext\";\r\nimport Pagination from \"./Pagination\";\r\nimport Posts from \"./Posts\";\r\nimport SearchInput from \"./SearchInput\";\r\nimport Loader from \"./Loader\";\r\nimport { Warning } from \"./Warning\";\r\n\r\nconst CompaniesTable = () => {\r\n  const { mergedData, searchedData, inputValue } = useContext(CompaniesContext);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [companiesPerPage] = useState(10);\r\n  const [currentList, setCurrentList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (searchedData.length) {\r\n      const indexOfLastPost = currentPage * companiesPerPage;\r\n      const indexOfFirstPost = indexOfLastPost - companiesPerPage;\r\n      setCurrentList(searchedData.slice(indexOfFirstPost, indexOfLastPost));\r\n    } else {\r\n      const indexOfLastPost = currentPage * companiesPerPage;\r\n      const indexOfFirstPost = indexOfLastPost - companiesPerPage;\r\n      setCurrentList(mergedData.slice(indexOfFirstPost, indexOfLastPost));\r\n    }\r\n  }, [companiesPerPage, currentPage, mergedData, searchedData]);\r\n\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <>\r\n      {mergedData ? <SearchInput /> : null}\r\n      {mergedData.length > 0 ? (\r\n        <>\r\n          {searchedData.length === 0 && inputValue.length !== 0 ? (\r\n            <Warning>Brak wyników dla frazy \"{inputValue}\" </Warning>\r\n          ) : (\r\n            <Posts posts={currentList} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n      {searchedData.length === 0 && inputValue.length !== 0 ? null : (\r\n        <Pagination\r\n          companiesPerPage={companiesPerPage}\r\n          totalPosts={\r\n            searchedData.length ? searchedData.length : mergedData.length\r\n          }\r\n          paginate={paginate}\r\n          currentPage={currentPage}\r\n          setCurrentPage={setCurrentPage}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompaniesTable;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport CompaniesContextProvider from \"./contexts/CompaniesContext\";\nimport CompaniesTable from \"./components/CompaniesTable\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChartBar } from \"@fortawesome/free-solid-svg-icons\";\nconst Title = styled.h1`\n  width: 100%;\n  text-align: center;\n  margin: 20px 0;\n  @media only screen and (min-width: 1024px) {\n    font-size: 42px;\n  }\n`;\n\nconst App = () => {\n  return (\n    <CompaniesContextProvider>\n      <div className=\"App\">\n        <Title>\n          Stats of Companies <FontAwesomeIcon icon={faChartBar} />\n        </Title>\n        <CompaniesTable />\n      </div>\n    </CompaniesContextProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}